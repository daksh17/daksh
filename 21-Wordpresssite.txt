Fault Tolerant Wordpress Website

End Result Overview

Lab:

	1. Create IAM role for S3FullAccess
	2. Create Security Group inside default VPC
		WebDMZ-SG -> Open SSH, HTTP for 0.0.0.0/0
		RDS-SG -> Open 3306 for WebDMZ-SG
	3. Create Classic ELB
		Select all AZ
		Put inside WebDMZ Security Group
		Set Healthcheck path as healthy.html
	4, Create new S3 bucket mywordpresscode
	5. Create new S3 bucket mymediafiles
	6. Create a cloudfront distribution
		Web Distribution
		Origin: mymediafiles
		Restrict bucket access: YES
		New Origin Access Identity
		YES, Update Bucket Policies: CHECKED
		Create distribution
		Make note of CloudFront IP
	7. Create a MYSQL RDS
		Select MySQL -> Community Edition -> PRODUCTION -> T2micro -> MultiAZ YES
			DBInstanceIdentified: wordpress
			Username: wordpress
			Password: wordpress
		Select RDS-SG in Security Group
			DatabaseName: wordpress
		Launch RDS DB Instance
	8. Create EC2 Instance
		Grant S3FullAccess role
		bootstrap:
		add WebDMZ Security Group
	9. Setup EC2 instance if bootstrap did not work
		yum update -y
		yum install php php-mysql httpd stress -y
		cd /etc/httpd/conf
		cp httpd.conf httpdconfbackup.conf
		vi httpd.conf (Use windscp to edit file)
			Look for "AllowOverride controls what directories may be placed in .htaccess files"
			AllowOverride All
		cd /var/www/html
		echo "Healthy" > healthy.html
		wget wget https://wordpress.org/latest.tar.gz
		ls
		tar -xzf latest.tar.gz
		ls
		mv wordpress/* /var/www/html/
		rm -rf latest.tar.gz
		rm -rf wordpress
		chmod -R 755 wp-content
		chown -R apache.apache wp-content
		service httpd start
		chkconfig httpd on
	10. Go to Load Balancer
		Add Instance
	
	11. Launch URL through ELB DNS
		Attend Wordpress Installation
		Provide DB details
		Copy splash screen contect into wp-config.php in /var/www/html
		Attend Wordpress Installation
		Install Wordpress
		Login into Wordpress Site
		Edit First Post
	12. Create Backup of Wordpress code into wordpresscode bucket
		#aws s3 ls
		#aws s3 cp --recursive /var/www/html s3://wordpresscode
		#aws s3 ls s3://wordpresssite
		#cd wp-content
		#ls
	13. Upload image file post
		http://<elbdns.com>/wp-admin/
		Login -> Media -> Add new media
		in terminal windows 
			#cd /var/www/html/wp-content
			#ls
			#uploads
			#ls
		Edit Post to insert media
		Click on post to view post -> Copy image address of media -> Observer address
	14. 	#cd /var/www/html
		#aws s3 ls
		#aws s3 cp --recursive /var/www/html/wp-content/uploads s3://mywordpressmedia
		
		Add new image 

		#aws s3 sync --delete /var/www/html/wp-content/uploads s3://mywordpressmedia --dryrun
		#aws s3 sync --delete /var/www/html/wp-content/uploads s3://mywordpressmedia --dryrun
		
	15. get htaccess into /var/www/html
		#mv htaccess .htaccess
		#service httpd restart
	16. Open post with media file. Copy Media link -> paste in browser and observer link in address
	17. #vi crontab
		add below lines
		*/5 * * * * root aws s3 sync --delete /var/www/html/wp-content/uploads s3://wordpressmedia
		*/5 * * * * root aws s3 sync --delete /var/www/html/ s3://wordpresssite				
	18. #service crond restart
	19. Upload another picture in post. Thumbnail will fail. 
	 	#service crond restart
	20. Create another ELB ELB2
		put it behind WebDMZ security Group
		configure health check file to healthy.html
	21. Stop first EC2 instance
		Public IP disappers and new IP might get assigned when we restart server
			1. Elastic IP
			2. Use Load Balancer
	22. Start Webserver EC2 Instance
		CSS won't load
	23. Create Application Load Balancer 
		Add Target group
		Add instance to the target group
	24. Create AMI outof Webserver EC2 instance
	25. Create another EC2 out of AMI--> Call it Production Server -> Put behind WebDMZ security Group
	26. SSH into new PROD webserver 
		remove crontab entry
		sync code and media
			#aws s3 sync --delete  s3://wordpresscode /var/www/html --dryrun
			#aws s3 sync --delete  s3://wordpresscode /var/www/html
			#aws s3 sync --delete  s3://wordpressmedia /var/www/html/wp-content/uploads
		
		
		add above command into crontab
		*/5 * * * * root aws s3 sync --delete  s3://wordpresscode /var/www/html
		*/5 * * * * root aws s3 sync --delete  s3://wordpressmedia /var/www/html/wp-content/uploads
		
		#service crond restart
	27. DR is ready in 5 mins
	
	28. Shutdown EC2 server and create AMI
	
	29. Terminate both instances
	
	30. Go to Autoscaling -> Launch Configuration -> Launch instance from PROD AMI -> S3AccessRole -> WebDMZ

		Create Autoscaling Group -> Select Launch Config -> Select all AZ -> Select Load Balancer -> Classic LB
		Setup Scaling Policy
		Create increase Alarm when CPU utilization >= 75 for 1 period of 1 min -> Add 2 instances
 		Create decrease Alarm when CPU Utilization <= 65 for 1 period of 1 min -> Remove 1 instance
		Send Notification
		
	31. Go to Autoscaling -> Launch Configuration -> Launch instance from WRITE AMI -> S3AccessRole -> WebDMZ

		Create Autoscaling Group -> Select Launch Config -> Select all AZ -> Select Load Balancer -> Classic LB
		Setup Scaling Policy
		Create increase Alarm when CPU utilization >= 75 for 1 period of 1 min -> Add 2 instances
 		Create decrease Alarm when CPU Utilization <= 65 for 1 period of 1 min -> Remove 1 instance
		Send Notification

	32. Stress Test

		#stress --cpu 100 on both instances
		If done right, we shall see new instances after 1-2 mins
	
	33. Start Terminating Instances

	34. Database Failover
	
				
		
		
		
		